# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.CosNotification
#
# $Id: gnu.mpd 95691 2012-04-10 20:11:35Z mitza $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.CosNotification
DEPENDENCY_FILE  = .depend.CosNotification

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)TAO_CosNotification.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)TAO_CosNotification

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)TAO_CosNotification.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  CosNotificationC.cpp \
  CosNotifyCommC.cpp \
  CosNotifyFilterC.cpp \
  CosNotifyFilterExtC.cpp \
  CosNotifyChannelAdminC.cpp \
  NotifyExtC.cpp \
  Event_ForwarderC.cpp \
  Notify/Notify_Extensions.cpp

VPATH = .:Notify

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lTAO_CosEvent -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = ../../../bin/tao_idl
TAO_IDL_DEP = ../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  CosNotification.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)../../.. \
        $(RC_INCLUDE_FLAG)../.. \
        $(RC_INCLUDE_FLAG)../../orbsvcs
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/CosNotification
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,TAO_CosEvent TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../../lib $(if $(ARCH),../../../lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),TAO_CosEvent TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif

ifeq (,$(TAO_ORBSVCS))
else
  ifeq (CosEvent, $(findstring CosEvent, $(TAO_ORBSVCS)))
  ifeq (Notify, $(findstring Notify, $(TAO_ORBSVCS)))
  else
    LIB_CHECKED   =
    SHLIB =
  endif
  else
    LIB_CHECKED   =
    SHLIB =
  endif
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../lib $(if $(ARCH),-L../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../.. -I../.. -I../../orbsvcs
CPPFLAGS     += -DTAO_HAS_TYPED_EVENT_CHANNEL
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTAO_NOTIFY_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo CosNotification will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
LIBPATH           := $(LIBPATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
PATH              := $(PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  )

LIB_INST_TAGS = header_files template_files inline_files$(if $(CUSTOM_INST_TAGS), $(CUSTOM_INST_TAGS))
LIB_INST_LOCATIONS = $(foreach tag,$(LIB_INST_TAGS),-b $(tag)=include$(INST_DIR))

INST_TAGS = lib_output$(if $(LIB_INST_TAGS), $(LIB_INST_TAGS))
INST_LOCATIONS = $(LIB_INST_LOCATIONS) -o lib_output=$(INSTALL_LIB)

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
	$(ACE_ROOT)/bin/ace_install_pkgconfig.pl TAO_CosNotification.pc.in --destdir "$(DESTDIR)" --prefix $(INSTALL_PREFIX) --libdir $(INSTALL_LIB) --libs "$(LIBS)" --version $(GNUACE_PROJECT_VERSION)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#build_files:
#RTSchedEvent.mpc
#SSLIOP.mpc
#PortableGroup.mpc
#CosNaming_Skel.mpc
#RTEvent.mpc
#CosConcurrency.mpc
#CosLoadBalancing.mpc
#DsEventLogAdmin.mpc
#DsLogAdmin.mpc
#FTORB.mpc
#RTSched.mpc
#RTEvent_Skel.mpc
#AV.mpc
#CosLifeCycle.mpc
#IFRService.mpc
#CosTime.mpc
#CosTrading.mpc
#CosProperty.mpc
#CosEvent.mpc
#CosNaming.mpc
#RTEventLogAdmin.mpc
#RTEvent_Serv.mpc
#FaultTolerance.mpc
#Svc_Utils.mpc
#HTIOP.mpc
#CosNotification.mpc
#RTCORBAEvent.mpc
#RT_Notification.mpc
#Security.mpc
#DsNotifyLogAdmin.mpc
#RTKokyuEvent.mpc
#CosNaming_Serv.mpc
#FtRtEvent.mpc
#ssliop_params_dup.mpb
#ec_typed_events.mpb
#cosnaming_serv_persistence.mpb
#ec_typed_events_serv.mpb
#ec_typed_events_skel.mpb
#ec_typed_events_idl.mpb
#orbsvcs.mwc
#
#inline_files:
#CosNotificationC.inl
#CosNotifyCommC.inl
#CosNotifyFilterC.inl
#CosNotifyFilterExtC.inl
#CosNotifyChannelAdminC.inl
#NotifyExtC.inl
#Event_ForwarderC.inl
#Notify/Method_Request_Updates_T.inl
#Notify/Refcountable_Guard_T.inl
#Notify/Event_Map_T.inl
#Notify/Find_Worker_T.inl
#Notify/Seq_Worker_T.inl
#Notify/Event_Map_Entry_T.inl
#Notify/Property_T.inl
#Notify/Container_T.inl
#
#resource_files:
#CosNotification.rc
#
#header_files:
#CosNotificationC.h
#CosNotifyCommC.h
#CosNotifyFilterC.h
#CosNotifyFilterExtC.h
#CosNotifyChannelAdminC.h
#NotifyExtC.h
#Event_ForwarderC.h
#Notify/POA_Helper.h
#Notify/Refcountable_Guard_T.h
#Notify/Routing_Slip_Persistence_Manager.h
#Notify/Name_Value_Pair.h
#Notify/Seq_Worker_T.h
#Notify/ProxySupplier_T.h
#Notify/Proxy_T.h
#Notify/notify_persist_export.h
#Notify/Method_Request.h
#Notify/XML_Loader.h
#Notify/Bit_Vector.h
#Notify/Service.h
#Notify/Routing_Slip_Queue.h
#Notify/Peer.h
#Notify/Factory.h
#Notify/Notify_Constraint_Interpreter.h
#Notify/ProxyConsumer_T.h
#Notify/Notify_Extensions.h
#Notify/EventTypeSeq.h
#Notify/Builder.h
#Notify/Event_Persistence_Strategy.h
#Notify/ID_Factory.h
#Notify/Topology_Object.h
#Notify/Topology_Saver.h
#Notify/ProxySupplier.h
#Notify/EventChannelFactory.h
#Notify/Method_Request_Lookup.h
#Notify/Event_Persistence_Factory.h
#Notify/RT_Properties.h
#Notify/Property.h
#Notify/Method_Request_Dispatch.h
#Notify/Proxy.h
#Notify/ConsumerAdmin.h
#Notify/Object.h
#Notify/Refcountable.h
#Notify/rt_notify_export.h
#Notify/Method_Request_Shutdown.h
#Notify/Topology_Loader.h
#Notify/Event_Manager.h
#Notify/Properties.h
#Notify/Property_T.h
#Notify/Buffering_Strategy.h
#Notify/ThreadPool_Task.h
#Notify/FilterFactory.h
#Notify/Subscription_Change_Worker.h
#Notify/Notify_EventChannelFactory_i.h
#Notify/Method_Request_Event.h
#Notify/CosNotify_Service.h
#Notify/RT_Builder.h
#Notify/Reactive_Task.h
#Notify/notify_skel_export.h
#Notify/notify_serv_export.h
#Notify/ProxyConsumer.h
#Notify/Default_Factory.h
#Notify/Notify_Default_EMO_Factory.h
#Notify/Worker_Task.h
#Notify/notify_export.h
#Notify/XML_Saver.h
#Notify/Notify_Default_POA_Factory.h
#Notify/Consumer_Map.h
#Notify/Event_Map_Entry_T.h
#Notify/Random_File.h
#Notify/Validate_Worker_T.h
#Notify/Topology_Factory.h
#Notify/Method_Request_Updates.h
#Notify/AdminProperties.h
#Notify/Reconnection_Registry.h
#Notify/Supplier.h
#Notify/QoSProperties.h
#Notify/Timer.h
#Notify/AllocTracker.h
#Notify/SupplierAdmin.h
#Notify/Standard_Event_Persistence.h
#Notify/EventType.h
#Notify/ETCL_FilterFactory.h
#Notify/Event_Map_T.h
#Notify/Save_Persist_Worker_T.h
#Notify/PropertySeq.h
#Notify/CosNotify_Initializer.h
#Notify/ETCL_Filter.h
#Notify/XML_Topology_Factory.h
#Notify/Persistent_File_Allocator.h
#Notify/Method_Request_Updates_T.h
#Notify/Validate_Client_Task.h
#Notify/Delivery_Request.h
#Notify/Find_Worker_T.h
#Notify/Container_T.h
#Notify/RT_Factory.h
#Notify/RT_Notify_Service.h
#Notify/Notify_Default_CO_Factory.h
#Notify/Property_Boolean.h
#Notify/Consumer.h
#Notify/Event.h
#Notify/Supplier_Map.h
#Notify/Reconnect_Worker_T.h
#Notify/Admin.h
#Notify/Timer_Reactor.h
#Notify/FilterAdmin.h
#Notify/Notify_Default_Collection_Factory.h
#Notify/Routing_Slip.h
#Notify/EventChannel.h
#Notify/Notify_Constraint_Visitors.h
#Notify/Timer_Queue.h
#Notify/RT_POA_Helper.h
#
#pkgconfig_files:
#TAO_CosNotification.pc.in
#
#source_files:
#CosNotificationC.cpp
#CosNotifyCommC.cpp
#CosNotifyFilterC.cpp
#CosNotifyFilterExtC.cpp
#CosNotifyChannelAdminC.cpp
#NotifyExtC.cpp
#Event_ForwarderC.cpp
#Notify/Notify_Extensions.cpp
#
#template_files:
#Notify/Reconnect_Worker_T.cpp
#Notify/Save_Persist_Worker_T.cpp
#Notify/ProxySupplier_T.cpp
#Notify/Validate_Worker_T.cpp
#Notify/Container_T.cpp
#Notify/Find_Worker_T.cpp
#Notify/Event_Map_T.cpp
#Notify/Property_T.cpp
#Notify/Event_Map_Entry_T.cpp
#Notify/ProxyConsumer_T.cpp
#Notify/Method_Request_Updates_T.cpp
#Notify/Seq_Worker_T.cpp
#Notify/Refcountable_Guard_T.cpp
#Notify/Proxy_T.cpp
#
#lib_output:
#../../../lib TAO_CosNotification

#END MPC-Generated Install Info

