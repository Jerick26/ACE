# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.AMI_InterReturnT_idl_gen
#
# $Id: gnu.mpd 95691 2012-04-10 20:11:35Z mitza $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.AMI_InterReturnT_idl_gen
DEPENDENCY_FILE  = .depend.AMI_InterReturnT_idl_gen


LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO
CIAO_ROOT ?= $(TAO_ROOT)/CIAO

FILES = \


#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
TAO_IDL = ../../../../../../../bin/tao_idl
TAO_IDL_DEP = ../../../../../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../../../../../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(CIAO_ROOT)/rules.ciao.GNU
include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/AMI_InterReturnT_idl_gen
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

LIBCHECK = 1
ifeq ($(corba_messaging),1)
ifeq ($(ami),1)
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif
else
  all: require_warning
endif
else
  all: require_warning
endif

ifeq ($(corba_messaging),1)
ifeq ($(ami),1)
else
  all: require_warning
endif
else
  all: require_warning
endif

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../../../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../../../../../lib $(if $(ARCH),-L../../../../../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../../../../../.. -I../../../../../.. -I../../../../../connectors -I../../../../../connectors/ami4ccm
CPPFLAGS     += -DCCM_LW
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo AMI_InterReturnT_idl_gen will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(corba_messaging),1)
requires_disabled_macros += corba_messaging
endif
ifneq ($(ami),1)
requires_disabled_macros += ami
endif
require_warning:
	@echo AMI_InterReturnT_idl_gen will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../../../../../lib$(if $(ARCH),:../../../../../../../lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../../../../../lib$(if $(ARCH),:../../../../../../../lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):../../../../../../../lib$(if $(ARCH),:../../../../../../../lib/$(ARCH))
LIBPATH           := $(LIBPATH):../../../../../../../lib$(if $(ARCH),:../../../../../../../lib/$(ARCH))
PATH              := $(PATH):../../../../../../../lib$(if $(ARCH),:../../../../../../../lib/$(ARCH))

GENERATED_DIRTY += InterReturnTC.inl InterReturnTS.h InterReturnT_svnt_T.h InterReturnT_svnt.h InterReturnTC.h InterReturnT_exec_export.h InterReturnTS.cpp InterReturnTC.cpp InterReturnT_svnt_T.cpp InterReturnT_svnt.cpp InterReturnTE.idl InterReturnTA.idl InterReturnT_stub_export.h InterReturnT_skel_export.h InterReturnT_conn_export.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnTC.inl" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnTS.h" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnT_svnt_T.h" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnT_svnt.h" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnTC.h" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnT_exec_export.h" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnTS.cpp" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnTC.cpp" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnT_svnt_T.cpp" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnT_svnt.cpp" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnTE.idl" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnTA.idl" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnT_stub_export.h" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnT_skel_export.h" 2> /dev/null || $(TEST_EXE) "InterReturnT.idl" -nt "InterReturnT_conn_export.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnTC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnTS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnT_svnt_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnT_svnt.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnTC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnT_exec_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnTS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnTC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnT_svnt_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnT_svnt.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnTE.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnTA.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnT_stub_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnT_skel_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "InterReturnT_conn_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnTC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnTS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnT_svnt_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnT_svnt.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnTC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnT_exec_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnTS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnTC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnT_svnt_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnT_svnt.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnTE.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnTA.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnT_stub_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnT_skel_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "InterReturnT_conn_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnTC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnTS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnT_svnt_T.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnT_svnt.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnTC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnT_exec_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnTS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnTC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnT_svnt_T.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnT_svnt.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnTE.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnTA.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnT_stub_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnT_skel_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "InterReturnT_conn_export.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
InterReturnTC.inl InterReturnTS.h InterReturnT_svnt_T.h InterReturnT_svnt.h InterReturnTC.h InterReturnT_exec_export.h InterReturnTS.cpp InterReturnTC.cpp InterReturnT_svnt_T.cpp InterReturnT_svnt.cpp InterReturnTE.idl InterReturnTA.idl InterReturnT_stub_export.h InterReturnT_skel_export.h InterReturnT_conn_export.h: InterReturnT.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I../../../../.. -I../../../../../ccm -Gsv -Glem -Gxhst -Gxhsk -Gxhsv -Gxhex -GC -Wb,stub_export_macro=INTERRETURN_T_STUB_Export -Wb,stub_export_include=InterReturnT_stub_export.h -Wb,skel_export_macro=INTERRETURN_T_SKEL_Export -Wb,skel_export_include=InterReturnT_skel_export.h -Wb,conn_export_macro=INTERRETURN_T_CONN_Export -Wb,conn_export_include=InterReturnT_conn_export.h -Wb,exec_export_macro=INTERRETURN_T_EXEC_Export -Wb,exec_export_include=InterReturnT_exec_export.h -I.. -GM -Gxhcn InterReturnT.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
InterReturnTC.inl InterReturnTS.h InterReturnT_svnt_T.h InterReturnT_svnt.h InterReturnTC.h InterReturnT_exec_export.h InterReturnTS.cpp InterReturnTC.cpp InterReturnT_svnt_T.cpp InterReturnT_svnt.cpp InterReturnTE.idl InterReturnTA.idl InterReturnT_stub_export.h InterReturnT_skel_export.h InterReturnT_conn_export.h: $(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
ifeq ($(corba_messaging),1)
ifeq ($(ami),1)
all: $(GENERATED_DIRTY)
endif
endif
endif

ADDITIONAL_IDL_TARGETS += InterReturnT$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(corba_messaging),1)
ifeq ($(ami),1)
	@-:
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


