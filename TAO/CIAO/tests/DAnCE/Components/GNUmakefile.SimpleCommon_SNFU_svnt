# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.SimpleCommon_SNFU_svnt
#
# $Id: gnu.mpd 95691 2012-04-10 20:11:35Z mitza $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.SimpleCommon_SNFU_svnt
DEPENDENCY_FILE  = .depend.SimpleCommon_SNFU_svnt

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)SimpleNilFacetUser_svnt.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)SimpleNilFacetUser_svnt

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)SimpleNilFacetUser_svnt.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO
CIAO_ROOT ?= $(TAO_ROOT)/CIAO

FILES = \
  SimpleNilFacetUserS.cpp \
  SimpleNilFacetUser_svnt.cpp

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lSimpleNilFacetUser_exec -lSimpleNilFacetUser_stub -lSimpleCommon_skel -lSimpleCommon_stub -lCIAO_Servant_Impl -lCIAO_Session_Container_stub -lCIAO_Container_Base_stub -lCCM_Cookie_Factory -lCCM_svnt -lTAO_PortableServer -lCCM_session_stub -lCCM_lem_stub -lCCM_stub -lTAO_PI -lTAO_CodecFactory -lTAO_Valuetype -lTAO_IFR_Client -lTAO_AnyTypeCode -lTAO -lCIAO_Logger -lACE
TAO_IDL = ../../../../../bin/tao_idl
TAO_IDL_DEP = ../../../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../../../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(CIAO_ROOT)/rules.ciao.GNU
include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/SimpleCommon_SNFU_svnt
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,SimpleNilFacetUser_exec SimpleNilFacetUser_stub SimpleCommon_skel SimpleCommon_stub CIAO_Servant_Impl CIAO_Session_Container_stub CIAO_Container_Base_stub CCM_Cookie_Factory CCM_svnt TAO_PortableServer CCM_session_stub CCM_lem_stub CCM_stub TAO_PI TAO_CodecFactory TAO_Valuetype TAO_IFR_Client TAO_AnyTypeCode TAO CIAO_Logger ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../../../../lib $(if $(ARCH),../../../../../lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),SimpleNilFacetUser_exec SimpleNilFacetUser_stub SimpleCommon_skel SimpleCommon_stub CIAO_Servant_Impl CIAO_Session_Container_stub CIAO_Container_Base_stub CCM_Cookie_Factory CCM_svnt TAO_PortableServer CCM_session_stub CCM_lem_stub CCM_stub TAO_PI TAO_CodecFactory TAO_Valuetype TAO_IFR_Client TAO_AnyTypeCode TAO CIAO_Logger ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../../../lib $(if $(ARCH),-L../../../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../.. -I../../../../.. -I../../../.. -I../../../ccm
CPPFLAGS     += -DCCM_LW
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DSIMPLENILFACETUSER_SVNT_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo SimpleCommon_SNFU_svnt will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../../../lib$(if $(ARCH),:../../../../../lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../../../lib$(if $(ARCH),:../../../../../lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):../../../../../lib$(if $(ARCH),:../../../../../lib/$(ARCH))
LIBPATH           := $(LIBPATH):../../../../../lib$(if $(ARCH),:../../../../../lib/$(ARCH))
PATH              := $(PATH):../../../../../lib$(if $(ARCH),:../../../../../lib/$(ARCH))

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


