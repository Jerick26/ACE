# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.ConvertIDL3
#
# $Id: gnu.mpd 95691 2012-04-10 20:11:35Z mitza $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.ConvertIDL3
DEPENDENCY_FILE  = .depend.ConvertIDL3


LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)ConvertIDL3.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)ConvertIDL3

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)ConvertIDL3.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO
CIAO_ROOT ?= $(TAO_ROOT)/CIAO

FILES = \
  convert_IDL2C.cpp \
  convert_IDL2S.cpp \
  include_IDL2C.cpp \
  include_IDL2S.cpp \
  keyword_clash_IDL2C.cpp \
  keyword_clash_IDL2S.cpp \
  pass_through_IDL2C.cpp \
  pass_through_IDL2S.cpp \
  raw_includeC.cpp \
  raw_includeS.cpp


#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lCIAO_Container_Base_stub -lCCM_svnt -lTAO_PortableServer -lCCM_session_stub -lCCM_lem_stub -lCCM_stub -lTAO_PI -lTAO_CodecFactory -lTAO_Valuetype -lTAO_IFR_Client -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = ../../../../../../bin/tao_idl
TAO_IDL_DEP = ../../../../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../../../../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))
TAO_IDL3_TO_IDL2 = ../../../../../../bin/tao_idl3_to_idl2
TAO_IDL3_TO_IDL2_DEP = ../../../../../../bin/tao_idl3_to_idl2$(EXEEXT)

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(CIAO_ROOT)/rules.ciao.GNU
include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/ConvertIDL3
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,CIAO_Container_Base_stub CCM_svnt TAO_PortableServer CCM_session_stub CCM_lem_stub CCM_stub TAO_PI TAO_CodecFactory TAO_Valuetype TAO_IFR_Client TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) ../../../../../../lib $(if $(ARCH),../../../../../../lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),CIAO_Container_Base_stub CCM_svnt TAO_PortableServer CCM_session_stub CCM_lem_stub CCM_stub TAO_PI TAO_CodecFactory TAO_Valuetype TAO_IFR_Client TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(mfc),1)
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif

ifneq ($(mfc),1)
else
  LIB_CHECKED   =
  SHLIB =
  all: avoid_warning
endif
LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../../../../lib $(if $(ARCH),-L../../../../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../../../../../.. -I../../../../.. -I../../../../ccm -I../../../..
CPPFLAGS     += -DCCM_LW
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo ConvertIDL3 will not be built due to the following missing library: $(LIBCHECK) >&2

ifeq ($(mfc),1)
avoids_enabled_macros += mfc
endif
avoid_warning:
	@echo ConvertIDL3 will not be built due to the following enabled make macros: $(avoids_enabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))
LIBPATH           := $(LIBPATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))
PATH              := $(PATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))

GENERATED_DIRTY += convert_IDL2.idl
OBJS_DEPEND_ON_GENERATED = 1
convert_IDL2.idl: convert.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL3_TO_IDL2_DEP)))
	$(if $(findstring ",$(TAO_IDL3_TO_IDL2)),$(TAO_IDL3_TO_IDL2),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL3_TO_IDL2)))) -I../../../.. -I../../../../ccm -I../../../../.. -I../../../../../orbsvcs $(TAO_IDL3_TO_IDL2_FLAGS) -DCCM_LW convert.idl


GENERATED_DIRTY += include_IDL2.idl
OBJS_DEPEND_ON_GENERATED = 1
include_IDL2.idl: include.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL3_TO_IDL2_DEP)))
	$(if $(findstring ",$(TAO_IDL3_TO_IDL2)),$(TAO_IDL3_TO_IDL2),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL3_TO_IDL2)))) -I../../../.. -I../../../../ccm -I../../../../.. -I../../../../../orbsvcs $(TAO_IDL3_TO_IDL2_FLAGS) -DCCM_LW include.idl


GENERATED_DIRTY += keyword_clash_IDL2.idl
OBJS_DEPEND_ON_GENERATED = 1
keyword_clash_IDL2.idl: keyword_clash.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL3_TO_IDL2_DEP)))
	$(if $(findstring ",$(TAO_IDL3_TO_IDL2)),$(TAO_IDL3_TO_IDL2),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL3_TO_IDL2)))) -I../../../.. -I../../../../ccm -I../../../../.. -I../../../../../orbsvcs $(TAO_IDL3_TO_IDL2_FLAGS) -DCCM_LW keyword_clash.idl


GENERATED_DIRTY += pass_through_IDL2.idl
OBJS_DEPEND_ON_GENERATED = 1
pass_through_IDL2.idl: pass_through.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL3_TO_IDL2_DEP)))
	$(if $(findstring ",$(TAO_IDL3_TO_IDL2)),$(TAO_IDL3_TO_IDL2),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL3_TO_IDL2)))) -I../../../.. -I../../../../ccm -I../../../../.. -I../../../../../orbsvcs $(TAO_IDL3_TO_IDL2_FLAGS) -DCCM_LW pass_through.idl


DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))
LIBPATH           := $(LIBPATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))
PATH              := $(PATH):../../../../../../lib$(if $(ARCH),:../../../../../../lib/$(ARCH))

GENERATED_DIRTY += convert_IDL2C.inl convert_IDL2S.h convert_IDL2C.h convert_IDL2S.cpp convert_IDL2C.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "convert_IDL2.idl" -nt "convert_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "convert_IDL2.idl" -nt "convert_IDL2S.h" 2> /dev/null || $(TEST_EXE) "convert_IDL2.idl" -nt "convert_IDL2C.h" 2> /dev/null || $(TEST_EXE) "convert_IDL2.idl" -nt "convert_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "convert_IDL2.idl" -nt "convert_IDL2C.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "convert_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "convert_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "convert_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "convert_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "convert_IDL2C.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "convert_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "convert_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "convert_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "convert_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "convert_IDL2C.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "convert_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "convert_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "convert_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "convert_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "convert_IDL2C.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
convert_IDL2C.inl convert_IDL2S.h convert_IDL2C.h convert_IDL2S.cpp convert_IDL2C.cpp: convert_IDL2.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I../../../.. -I../../../../ccm -Sm convert_IDL2.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
convert_IDL2C.inl convert_IDL2S.h convert_IDL2C.h convert_IDL2S.cpp convert_IDL2C.cpp: $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += includeC.inl includeS.h includeC.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "include.idl" -nt "includeC.inl" 2> /dev/null || $(TEST_EXE) "include.idl" -nt "includeS.h" 2> /dev/null || $(TEST_EXE) "include.idl" -nt "includeC.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "includeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "includeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "includeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "includeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "includeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "includeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "includeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "includeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "includeC.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
includeC.inl includeS.h includeC.h: include.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I../../../.. -I../../../../ccm -Sm include.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
includeC.inl includeS.h includeC.h: $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += include_IDL2C.inl include_IDL2S.h include_IDL2C.h include_IDL2S.cpp include_IDL2C.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "include_IDL2.idl" -nt "include_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "include_IDL2.idl" -nt "include_IDL2S.h" 2> /dev/null || $(TEST_EXE) "include_IDL2.idl" -nt "include_IDL2C.h" 2> /dev/null || $(TEST_EXE) "include_IDL2.idl" -nt "include_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "include_IDL2.idl" -nt "include_IDL2C.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "include_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "include_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "include_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "include_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "include_IDL2C.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "include_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "include_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "include_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "include_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "include_IDL2C.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "include_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "include_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "include_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "include_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "include_IDL2C.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
include_IDL2C.inl include_IDL2S.h include_IDL2C.h include_IDL2S.cpp include_IDL2C.cpp: include_IDL2.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I../../../.. -I../../../../ccm -Sm include_IDL2.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
include_IDL2C.inl include_IDL2S.h include_IDL2C.h include_IDL2S.cpp include_IDL2C.cpp: $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += keyword_clash_IDL2C.inl keyword_clash_IDL2S.h keyword_clash_IDL2C.h keyword_clash_IDL2S.cpp keyword_clash_IDL2C.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "keyword_clash_IDL2.idl" -nt "keyword_clash_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "keyword_clash_IDL2.idl" -nt "keyword_clash_IDL2S.h" 2> /dev/null || $(TEST_EXE) "keyword_clash_IDL2.idl" -nt "keyword_clash_IDL2C.h" 2> /dev/null || $(TEST_EXE) "keyword_clash_IDL2.idl" -nt "keyword_clash_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "keyword_clash_IDL2.idl" -nt "keyword_clash_IDL2C.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "keyword_clash_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "keyword_clash_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "keyword_clash_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "keyword_clash_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "keyword_clash_IDL2C.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "keyword_clash_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "keyword_clash_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "keyword_clash_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "keyword_clash_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "keyword_clash_IDL2C.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "keyword_clash_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "keyword_clash_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "keyword_clash_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "keyword_clash_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "keyword_clash_IDL2C.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
keyword_clash_IDL2C.inl keyword_clash_IDL2S.h keyword_clash_IDL2C.h keyword_clash_IDL2S.cpp keyword_clash_IDL2C.cpp: keyword_clash_IDL2.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I../../../.. -I../../../../ccm -Sm keyword_clash_IDL2.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
keyword_clash_IDL2C.inl keyword_clash_IDL2S.h keyword_clash_IDL2C.h keyword_clash_IDL2S.cpp keyword_clash_IDL2C.cpp: $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += pass_through_IDL2C.inl pass_through_IDL2S.h pass_through_IDL2C.h pass_through_IDL2S.cpp pass_through_IDL2C.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "pass_through_IDL2.idl" -nt "pass_through_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "pass_through_IDL2.idl" -nt "pass_through_IDL2S.h" 2> /dev/null || $(TEST_EXE) "pass_through_IDL2.idl" -nt "pass_through_IDL2C.h" 2> /dev/null || $(TEST_EXE) "pass_through_IDL2.idl" -nt "pass_through_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "pass_through_IDL2.idl" -nt "pass_through_IDL2C.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "pass_through_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "pass_through_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "pass_through_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "pass_through_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "pass_through_IDL2C.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "pass_through_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "pass_through_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "pass_through_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "pass_through_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "pass_through_IDL2C.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "pass_through_IDL2C.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "pass_through_IDL2S.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "pass_through_IDL2C.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "pass_through_IDL2S.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "pass_through_IDL2C.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
pass_through_IDL2C.inl pass_through_IDL2S.h pass_through_IDL2C.h pass_through_IDL2S.cpp pass_through_IDL2C.cpp: pass_through_IDL2.idl keyword_clash_IDL2C.h $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I../../../.. -I../../../../ccm -Sm pass_through_IDL2.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
pass_through_IDL2C.inl pass_through_IDL2S.h pass_through_IDL2C.h pass_through_IDL2S.cpp pass_through_IDL2C.cpp: $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += raw_includeC.inl raw_includeS.h raw_includeC.h raw_includeS.cpp raw_includeC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "raw_include.idl" -nt "raw_includeC.inl" 2> /dev/null || $(TEST_EXE) "raw_include.idl" -nt "raw_includeS.h" 2> /dev/null || $(TEST_EXE) "raw_include.idl" -nt "raw_includeC.h" 2> /dev/null || $(TEST_EXE) "raw_include.idl" -nt "raw_includeS.cpp" 2> /dev/null || $(TEST_EXE) "raw_include.idl" -nt "raw_includeC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "raw_includeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "raw_includeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "raw_includeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "raw_includeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "raw_includeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "raw_includeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "raw_includeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "raw_includeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "raw_includeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "raw_includeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "raw_includeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "raw_includeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "raw_includeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "raw_includeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "raw_includeC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
raw_includeC.inl raw_includeS.h raw_includeC.h raw_includeS.cpp raw_includeC.cpp: raw_include.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I../../../.. -I../../../../ccm -Sm raw_include.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
raw_includeC.inl raw_includeS.h raw_includeC.h raw_includeS.cpp raw_includeC.cpp: $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += convert_IDL2$(IDL_CLIENT_HDR_EXT) include$(IDL_CLIENT_HDR_EXT) include_IDL2$(IDL_CLIENT_HDR_EXT) keyword_clash_IDL2$(IDL_CLIENT_HDR_EXT) pass_through_IDL2$(IDL_CLIENT_HDR_EXT) raw_include$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = convert_IDL2C.cpp convert_IDL2S.cpp include_IDL2C.cpp include_IDL2S.cpp keyword_clash_IDL2C.cpp keyword_clash_IDL2S.cpp pass_through_IDL2C.cpp pass_through_IDL2S.cpp raw_includeC.cpp raw_includeS.cpp  
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:convert_IDL2S.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:convert_IDL2C.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:include_IDL2S.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:include_IDL2C.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:keyword_clash_IDL2S.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:keyword_clash_IDL2C.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:pass_through_IDL2S.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:pass_through_IDL2C.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:raw_includeS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:raw_includeC.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifneq ($(mfc),1)
	@-:
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


