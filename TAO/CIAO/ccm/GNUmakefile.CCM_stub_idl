# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.CCM_stub_idl
#
# $Id: gnu.mpd 95691 2012-04-10 20:11:35Z mitza $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.CCM_stub_idl
DEPENDENCY_FILE  = .depend.CCM_stub_idl


LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO
CIAO_ROOT ?= $(TAO_ROOT)/CIAO

FILES = \


#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
TAO_IDL = ../../../bin/tao_idl
TAO_IDL_DEP = ../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(CIAO_ROOT)/rules.ciao.GNU
include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/CCM_stub_idl
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif


include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../lib $(if $(ARCH),-L../../../lib/$(ARCH))
endif
CPPFLAGS     += -I.. -I../../.. -I../..
CPPFLAGS     += -DCCM_LW
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo CCM_stub_idl will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
LIBPATH           := $(LIBPATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))
PATH              := $(PATH):../../../lib$(if $(ARCH),:../../../lib/$(ARCH))

GENERATED_DIRTY += CCM_BaseS.h CCM_BaseC.h CCM_Stub_Export.h CCM_BaseC.cpp CCM_Svnt_Export.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Base.idl" -nt "CCM_BaseS.h" 2> /dev/null || $(TEST_EXE) "CCM_Base.idl" -nt "CCM_BaseC.h" 2> /dev/null || $(TEST_EXE) "CCM_Base.idl" -nt "CCM_Stub_Export.h" 2> /dev/null || $(TEST_EXE) "CCM_Base.idl" -nt "CCM_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "CCM_Base.idl" -nt "CCM_Svnt_Export.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_BaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_BaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_Stub_Export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_Svnt_Export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_BaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_BaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_Stub_Export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_Svnt_Export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_BaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_BaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_Stub_Export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_Svnt_Export.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_BaseS.h CCM_BaseC.h CCM_Stub_Export.h CCM_BaseC.cpp CCM_Svnt_Export.h: CCM_Base.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export -SS -Sci -Gxhst -Gxhsk CCM_Base.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_BaseS.h CCM_BaseC.h CCM_Stub_Export.h CCM_BaseC.cpp CCM_Svnt_Export.h: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_ExceptionsS.h CCM_ExceptionsC.h CCM_ExceptionsC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Exceptions.idl" -nt "CCM_ExceptionsS.h" 2> /dev/null || $(TEST_EXE) "CCM_Exceptions.idl" -nt "CCM_ExceptionsC.h" 2> /dev/null || $(TEST_EXE) "CCM_Exceptions.idl" -nt "CCM_ExceptionsC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ExceptionsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ExceptionsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ExceptionsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ExceptionsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ExceptionsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ExceptionsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ExceptionsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ExceptionsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ExceptionsC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_ExceptionsS.h CCM_ExceptionsC.h CCM_ExceptionsC.cpp: CCM_Exceptions.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export -SS -Sci CCM_Exceptions.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_ExceptionsS.h CCM_ExceptionsC.h CCM_ExceptionsC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_CookieC.inl CCM_CookieS.h CCM_CookieC.h CCM_CookieC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Cookie.idl" -nt "CCM_CookieC.inl" 2> /dev/null || $(TEST_EXE) "CCM_Cookie.idl" -nt "CCM_CookieS.h" 2> /dev/null || $(TEST_EXE) "CCM_Cookie.idl" -nt "CCM_CookieC.h" 2> /dev/null || $(TEST_EXE) "CCM_Cookie.idl" -nt "CCM_CookieC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_CookieC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_CookieS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_CookieC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_CookieC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_CookieC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_CookieS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_CookieC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_CookieC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_CookieC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_CookieS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_CookieC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_CookieC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_CookieC.inl CCM_CookieS.h CCM_CookieC.h CCM_CookieC.cpp: CCM_Cookie.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export -SS CCM_Cookie.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_CookieC.inl CCM_CookieS.h CCM_CookieC.h CCM_CookieC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_EnumerationC.inl CCM_EnumerationS.h CCM_EnumerationC.h CCM_EnumerationC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Enumeration.idl" -nt "CCM_EnumerationC.inl" 2> /dev/null || $(TEST_EXE) "CCM_Enumeration.idl" -nt "CCM_EnumerationS.h" 2> /dev/null || $(TEST_EXE) "CCM_Enumeration.idl" -nt "CCM_EnumerationC.h" 2> /dev/null || $(TEST_EXE) "CCM_Enumeration.idl" -nt "CCM_EnumerationC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EnumerationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EnumerationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EnumerationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EnumerationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EnumerationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EnumerationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EnumerationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EnumerationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EnumerationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EnumerationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EnumerationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EnumerationC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_EnumerationC.inl CCM_EnumerationS.h CCM_EnumerationC.h CCM_EnumerationC.cpp: CCM_Enumeration.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export -SS CCM_Enumeration.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_EnumerationC.inl CCM_EnumerationS.h CCM_EnumerationC.h CCM_EnumerationC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_EventBaseC.inl CCM_EventBaseS.h CCM_EventBaseC.h CCM_EventBaseC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_EventBase.idl" -nt "CCM_EventBaseC.inl" 2> /dev/null || $(TEST_EXE) "CCM_EventBase.idl" -nt "CCM_EventBaseS.h" 2> /dev/null || $(TEST_EXE) "CCM_EventBase.idl" -nt "CCM_EventBaseC.h" 2> /dev/null || $(TEST_EXE) "CCM_EventBase.idl" -nt "CCM_EventBaseC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventBaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventBaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventBaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventBaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventBaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventBaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventBaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventBaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventBaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventBaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventBaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventBaseC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_EventBaseC.inl CCM_EventBaseS.h CCM_EventBaseC.h CCM_EventBaseC.cpp: CCM_EventBase.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export -SS CCM_EventBase.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_EventBaseC.inl CCM_EventBaseS.h CCM_EventBaseC.h CCM_EventBaseC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += ComponentsS.h ComponentsC.h ComponentsC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Components.idl" -nt "ComponentsS.h" 2> /dev/null || $(TEST_EXE) "Components.idl" -nt "ComponentsC.h" 2> /dev/null || $(TEST_EXE) "Components.idl" -nt "ComponentsC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ComponentsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ComponentsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "ComponentsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ComponentsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ComponentsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "ComponentsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ComponentsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ComponentsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "ComponentsC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
ComponentsS.h ComponentsC.h ComponentsC.cpp: Components.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export -SS -Sci Components.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
ComponentsS.h ComponentsC.h ComponentsC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_HomeConfigurationC.inl CCM_HomeConfigurationS.h CCM_HomeConfigurationC.h CCM_HomeConfigurationS.cpp CCM_HomeConfigurationC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_HomeConfiguration.idl" -nt "CCM_HomeConfigurationC.inl" 2> /dev/null || $(TEST_EXE) "CCM_HomeConfiguration.idl" -nt "CCM_HomeConfigurationS.h" 2> /dev/null || $(TEST_EXE) "CCM_HomeConfiguration.idl" -nt "CCM_HomeConfigurationC.h" 2> /dev/null || $(TEST_EXE) "CCM_HomeConfiguration.idl" -nt "CCM_HomeConfigurationS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_HomeConfiguration.idl" -nt "CCM_HomeConfigurationC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeConfigurationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeConfigurationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeConfigurationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeConfigurationS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeConfigurationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeConfigurationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeConfigurationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeConfigurationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeConfigurationS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeConfigurationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeConfigurationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeConfigurationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeConfigurationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeConfigurationS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeConfigurationC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_HomeConfigurationC.inl CCM_HomeConfigurationS.h CCM_HomeConfigurationC.h CCM_HomeConfigurationS.cpp CCM_HomeConfigurationC.cpp: CCM_HomeConfiguration.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_HomeConfiguration.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_HomeConfigurationC.inl CCM_HomeConfigurationS.h CCM_HomeConfigurationC.h CCM_HomeConfigurationS.cpp CCM_HomeConfigurationC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_StandardConfiguratorC.inl CCM_StandardConfiguratorS.h CCM_StandardConfiguratorC.h CCM_StandardConfiguratorS.cpp CCM_StandardConfiguratorC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_StandardConfigurator.idl" -nt "CCM_StandardConfiguratorC.inl" 2> /dev/null || $(TEST_EXE) "CCM_StandardConfigurator.idl" -nt "CCM_StandardConfiguratorS.h" 2> /dev/null || $(TEST_EXE) "CCM_StandardConfigurator.idl" -nt "CCM_StandardConfiguratorC.h" 2> /dev/null || $(TEST_EXE) "CCM_StandardConfigurator.idl" -nt "CCM_StandardConfiguratorS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_StandardConfigurator.idl" -nt "CCM_StandardConfiguratorC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_StandardConfiguratorC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_StandardConfiguratorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_StandardConfiguratorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_StandardConfiguratorS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_StandardConfiguratorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_StandardConfiguratorC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_StandardConfiguratorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_StandardConfiguratorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_StandardConfiguratorS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_StandardConfiguratorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_StandardConfiguratorC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_StandardConfiguratorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_StandardConfiguratorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_StandardConfiguratorS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_StandardConfiguratorC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_StandardConfiguratorC.inl CCM_StandardConfiguratorS.h CCM_StandardConfiguratorC.h CCM_StandardConfiguratorS.cpp CCM_StandardConfiguratorC.cpp: CCM_StandardConfigurator.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_StandardConfigurator.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_StandardConfiguratorC.inl CCM_StandardConfiguratorS.h CCM_StandardConfiguratorC.h CCM_StandardConfiguratorS.cpp CCM_StandardConfiguratorC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_HomeC.inl CCM_HomeS.h CCM_HomeC.h CCM_HomeS.cpp CCM_HomeC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Home.idl" -nt "CCM_HomeC.inl" 2> /dev/null || $(TEST_EXE) "CCM_Home.idl" -nt "CCM_HomeS.h" 2> /dev/null || $(TEST_EXE) "CCM_Home.idl" -nt "CCM_HomeC.h" 2> /dev/null || $(TEST_EXE) "CCM_Home.idl" -nt "CCM_HomeS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_Home.idl" -nt "CCM_HomeC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_HomeC.inl CCM_HomeS.h CCM_HomeC.h CCM_HomeS.cpp CCM_HomeC.cpp: CCM_Home.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_Home.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_HomeC.inl CCM_HomeS.h CCM_HomeC.h CCM_HomeS.cpp CCM_HomeC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_HomesC.inl CCM_HomesS.h CCM_HomesC.h CCM_HomesS.cpp CCM_HomesC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Homes.idl" -nt "CCM_HomesC.inl" 2> /dev/null || $(TEST_EXE) "CCM_Homes.idl" -nt "CCM_HomesS.h" 2> /dev/null || $(TEST_EXE) "CCM_Homes.idl" -nt "CCM_HomesC.h" 2> /dev/null || $(TEST_EXE) "CCM_Homes.idl" -nt "CCM_HomesS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_Homes.idl" -nt "CCM_HomesC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomesC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomesS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomesC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomesS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomesC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomesC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomesS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomesC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomesS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomesC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomesC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomesS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomesC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomesS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomesC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_HomesC.inl CCM_HomesS.h CCM_HomesC.h CCM_HomesS.cpp CCM_HomesC.cpp: CCM_Homes.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_Homes.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_HomesC.inl CCM_HomesS.h CCM_HomesC.h CCM_HomesS.cpp CCM_HomesC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_ObjectC.inl CCM_ObjectS.h CCM_ObjectC.h CCM_ObjectS.cpp CCM_ObjectC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Object.idl" -nt "CCM_ObjectC.inl" 2> /dev/null || $(TEST_EXE) "CCM_Object.idl" -nt "CCM_ObjectS.h" 2> /dev/null || $(TEST_EXE) "CCM_Object.idl" -nt "CCM_ObjectC.h" 2> /dev/null || $(TEST_EXE) "CCM_Object.idl" -nt "CCM_ObjectS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_Object.idl" -nt "CCM_ObjectC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ObjectC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ObjectS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ObjectC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ObjectS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ObjectC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ObjectC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ObjectS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ObjectC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ObjectS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ObjectC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ObjectC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ObjectS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ObjectC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ObjectS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ObjectC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_ObjectC.inl CCM_ObjectS.h CCM_ObjectC.h CCM_ObjectS.cpp CCM_ObjectC.cpp: CCM_Object.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_Object.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_ObjectC.inl CCM_ObjectS.h CCM_ObjectC.h CCM_ObjectS.cpp CCM_ObjectC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_PrimaryKeyBaseC.inl CCM_PrimaryKeyBaseS.h CCM_PrimaryKeyBaseC.h CCM_PrimaryKeyBaseS.cpp CCM_PrimaryKeyBaseC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_PrimaryKeyBase.idl" -nt "CCM_PrimaryKeyBaseC.inl" 2> /dev/null || $(TEST_EXE) "CCM_PrimaryKeyBase.idl" -nt "CCM_PrimaryKeyBaseS.h" 2> /dev/null || $(TEST_EXE) "CCM_PrimaryKeyBase.idl" -nt "CCM_PrimaryKeyBaseC.h" 2> /dev/null || $(TEST_EXE) "CCM_PrimaryKeyBase.idl" -nt "CCM_PrimaryKeyBaseS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_PrimaryKeyBase.idl" -nt "CCM_PrimaryKeyBaseC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_PrimaryKeyBaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_PrimaryKeyBaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_PrimaryKeyBaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_PrimaryKeyBaseS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_PrimaryKeyBaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_PrimaryKeyBaseC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_PrimaryKeyBaseC.inl CCM_PrimaryKeyBaseS.h CCM_PrimaryKeyBaseC.h CCM_PrimaryKeyBaseS.cpp CCM_PrimaryKeyBaseC.cpp: CCM_PrimaryKeyBase.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_PrimaryKeyBase.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_PrimaryKeyBaseC.inl CCM_PrimaryKeyBaseS.h CCM_PrimaryKeyBaseC.h CCM_PrimaryKeyBaseS.cpp CCM_PrimaryKeyBaseC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_HomeFinderC.inl CCM_HomeFinderS.h CCM_HomeFinderC.h CCM_HomeFinderS.cpp CCM_HomeFinderC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_HomeFinder.idl" -nt "CCM_HomeFinderC.inl" 2> /dev/null || $(TEST_EXE) "CCM_HomeFinder.idl" -nt "CCM_HomeFinderS.h" 2> /dev/null || $(TEST_EXE) "CCM_HomeFinder.idl" -nt "CCM_HomeFinderC.h" 2> /dev/null || $(TEST_EXE) "CCM_HomeFinder.idl" -nt "CCM_HomeFinderS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_HomeFinder.idl" -nt "CCM_HomeFinderC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeFinderC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeFinderS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeFinderC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeFinderS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_HomeFinderC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeFinderC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeFinderS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeFinderC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeFinderS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_HomeFinderC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeFinderC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeFinderS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeFinderC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeFinderS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_HomeFinderC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_HomeFinderC.inl CCM_HomeFinderS.h CCM_HomeFinderC.h CCM_HomeFinderS.cpp CCM_HomeFinderC.cpp: CCM_HomeFinder.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_HomeFinder.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_HomeFinderC.inl CCM_HomeFinderS.h CCM_HomeFinderC.h CCM_HomeFinderS.cpp CCM_HomeFinderC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_ConfiguratorC.inl CCM_ConfiguratorS.h CCM_ConfiguratorC.h CCM_ConfiguratorS.cpp CCM_ConfiguratorC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Configurator.idl" -nt "CCM_ConfiguratorC.inl" 2> /dev/null || $(TEST_EXE) "CCM_Configurator.idl" -nt "CCM_ConfiguratorS.h" 2> /dev/null || $(TEST_EXE) "CCM_Configurator.idl" -nt "CCM_ConfiguratorC.h" 2> /dev/null || $(TEST_EXE) "CCM_Configurator.idl" -nt "CCM_ConfiguratorS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_Configurator.idl" -nt "CCM_ConfiguratorC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ConfiguratorC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ConfiguratorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ConfiguratorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ConfiguratorS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ConfiguratorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ConfiguratorC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ConfiguratorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ConfiguratorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ConfiguratorS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ConfiguratorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ConfiguratorC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ConfiguratorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ConfiguratorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ConfiguratorS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ConfiguratorC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_ConfiguratorC.inl CCM_ConfiguratorS.h CCM_ConfiguratorC.h CCM_ConfiguratorS.cpp CCM_ConfiguratorC.cpp: CCM_Configurator.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_Configurator.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_ConfiguratorC.inl CCM_ConfiguratorS.h CCM_ConfiguratorC.h CCM_ConfiguratorS.cpp CCM_ConfiguratorC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_KeylessCCMHomeC.inl CCM_KeylessCCMHomeS.h CCM_KeylessCCMHomeC.h CCM_KeylessCCMHomeS.cpp CCM_KeylessCCMHomeC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_KeylessCCMHome.idl" -nt "CCM_KeylessCCMHomeC.inl" 2> /dev/null || $(TEST_EXE) "CCM_KeylessCCMHome.idl" -nt "CCM_KeylessCCMHomeS.h" 2> /dev/null || $(TEST_EXE) "CCM_KeylessCCMHome.idl" -nt "CCM_KeylessCCMHomeC.h" 2> /dev/null || $(TEST_EXE) "CCM_KeylessCCMHome.idl" -nt "CCM_KeylessCCMHomeS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_KeylessCCMHome.idl" -nt "CCM_KeylessCCMHomeC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_KeylessCCMHomeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_KeylessCCMHomeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_KeylessCCMHomeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_KeylessCCMHomeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_KeylessCCMHomeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_KeylessCCMHomeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_KeylessCCMHomeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_KeylessCCMHomeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_KeylessCCMHomeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_KeylessCCMHomeC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_KeylessCCMHomeC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_KeylessCCMHomeS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_KeylessCCMHomeC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_KeylessCCMHomeS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_KeylessCCMHomeC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_KeylessCCMHomeC.inl CCM_KeylessCCMHomeS.h CCM_KeylessCCMHomeC.h CCM_KeylessCCMHomeS.cpp CCM_KeylessCCMHomeC.cpp: CCM_KeylessCCMHome.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_KeylessCCMHome.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_KeylessCCMHomeC.inl CCM_KeylessCCMHomeS.h CCM_KeylessCCMHomeC.h CCM_KeylessCCMHomeS.cpp CCM_KeylessCCMHomeC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_NavigationC.inl CCM_NavigationS.h CCM_NavigationC.h CCM_NavigationS.cpp CCM_NavigationC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Navigation.idl" -nt "CCM_NavigationC.inl" 2> /dev/null || $(TEST_EXE) "CCM_Navigation.idl" -nt "CCM_NavigationS.h" 2> /dev/null || $(TEST_EXE) "CCM_Navigation.idl" -nt "CCM_NavigationC.h" 2> /dev/null || $(TEST_EXE) "CCM_Navigation.idl" -nt "CCM_NavigationS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_Navigation.idl" -nt "CCM_NavigationC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_NavigationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_NavigationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_NavigationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_NavigationS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_NavigationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_NavigationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_NavigationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_NavigationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_NavigationS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_NavigationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_NavigationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_NavigationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_NavigationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_NavigationS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_NavigationC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_NavigationC.inl CCM_NavigationS.h CCM_NavigationC.h CCM_NavigationS.cpp CCM_NavigationC.cpp: CCM_Navigation.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_Navigation.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_NavigationC.inl CCM_NavigationS.h CCM_NavigationC.h CCM_NavigationS.cpp CCM_NavigationC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_ReceptacleC.inl CCM_ReceptacleS.h CCM_ReceptacleC.h CCM_ReceptacleS.cpp CCM_ReceptacleC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Receptacle.idl" -nt "CCM_ReceptacleC.inl" 2> /dev/null || $(TEST_EXE) "CCM_Receptacle.idl" -nt "CCM_ReceptacleS.h" 2> /dev/null || $(TEST_EXE) "CCM_Receptacle.idl" -nt "CCM_ReceptacleC.h" 2> /dev/null || $(TEST_EXE) "CCM_Receptacle.idl" -nt "CCM_ReceptacleS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_Receptacle.idl" -nt "CCM_ReceptacleC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ReceptacleC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ReceptacleS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ReceptacleC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ReceptacleS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_ReceptacleC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ReceptacleC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ReceptacleS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ReceptacleC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ReceptacleS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_ReceptacleC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ReceptacleC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ReceptacleS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ReceptacleC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ReceptacleS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_ReceptacleC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_ReceptacleC.inl CCM_ReceptacleS.h CCM_ReceptacleC.h CCM_ReceptacleS.cpp CCM_ReceptacleC.cpp: CCM_Receptacle.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_Receptacle.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_ReceptacleC.inl CCM_ReceptacleS.h CCM_ReceptacleC.h CCM_ReceptacleS.cpp CCM_ReceptacleC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_EventsC.inl CCM_EventsS.h CCM_EventsC.h CCM_EventsS.cpp CCM_EventsC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_Events.idl" -nt "CCM_EventsC.inl" 2> /dev/null || $(TEST_EXE) "CCM_Events.idl" -nt "CCM_EventsS.h" 2> /dev/null || $(TEST_EXE) "CCM_Events.idl" -nt "CCM_EventsC.h" 2> /dev/null || $(TEST_EXE) "CCM_Events.idl" -nt "CCM_EventsS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_Events.idl" -nt "CCM_EventsC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventsS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventsS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventsS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventsC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_EventsC.inl CCM_EventsS.h CCM_EventsC.h CCM_EventsS.cpp CCM_EventsC.cpp: CCM_Events.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_Events.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_EventsC.inl CCM_EventsS.h CCM_EventsC.h CCM_EventsS.cpp CCM_EventsC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += CCM_EventConsumerBaseC.inl CCM_EventConsumerBaseS.h CCM_EventConsumerBaseC.h CCM_EventConsumerBaseS.cpp CCM_EventConsumerBaseC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CCM_EventConsumerBase.idl" -nt "CCM_EventConsumerBaseC.inl" 2> /dev/null || $(TEST_EXE) "CCM_EventConsumerBase.idl" -nt "CCM_EventConsumerBaseS.h" 2> /dev/null || $(TEST_EXE) "CCM_EventConsumerBase.idl" -nt "CCM_EventConsumerBaseC.h" 2> /dev/null || $(TEST_EXE) "CCM_EventConsumerBase.idl" -nt "CCM_EventConsumerBaseS.cpp" 2> /dev/null || $(TEST_EXE) "CCM_EventConsumerBase.idl" -nt "CCM_EventConsumerBaseC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventConsumerBaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventConsumerBaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventConsumerBaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventConsumerBaseS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "CCM_EventConsumerBaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventConsumerBaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventConsumerBaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventConsumerBaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventConsumerBaseS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "CCM_EventConsumerBaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventConsumerBaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventConsumerBaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventConsumerBaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventConsumerBaseS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "CCM_EventConsumerBaseC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CCM_EventConsumerBaseC.inl CCM_EventConsumerBaseS.h CCM_EventConsumerBaseC.h CCM_EventConsumerBaseS.cpp CCM_EventConsumerBaseC.cpp: CCM_EventConsumerBase.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -DCCM_LW -Gcl -I.. -I../ccm -Wb,stub_export_include=CCM_Stub_Export.h -Wb,stub_export_macro=CCM_STUB_Export -Wb,skel_export_include=CCM_Svnt_Export.h -Wb,skel_export_macro=CCM_SVNT_Export CCM_EventConsumerBase.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
CCM_EventConsumerBaseC.inl CCM_EventConsumerBaseS.h CCM_EventConsumerBaseC.h CCM_EventConsumerBaseS.cpp CCM_EventConsumerBaseC.cpp: $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
all: $(GENERATED_DIRTY)
endif

ADDITIONAL_IDL_TARGETS += CCM_Base$(IDL_CLIENT_HDR_EXT) CCM_Exceptions$(IDL_CLIENT_HDR_EXT) CCM_Cookie$(IDL_CLIENT_HDR_EXT) CCM_Enumeration$(IDL_CLIENT_HDR_EXT) CCM_EventBase$(IDL_CLIENT_HDR_EXT) Components$(IDL_CLIENT_HDR_EXT) CCM_HomeConfiguration$(IDL_CLIENT_HDR_EXT) CCM_StandardConfigurator$(IDL_CLIENT_HDR_EXT) CCM_Home$(IDL_CLIENT_HDR_EXT) CCM_Homes$(IDL_CLIENT_HDR_EXT) CCM_Object$(IDL_CLIENT_HDR_EXT) CCM_PrimaryKeyBase$(IDL_CLIENT_HDR_EXT) CCM_HomeFinder$(IDL_CLIENT_HDR_EXT) CCM_Configurator$(IDL_CLIENT_HDR_EXT) CCM_KeylessCCMHome$(IDL_CLIENT_HDR_EXT) CCM_Navigation$(IDL_CLIENT_HDR_EXT) CCM_Receptacle$(IDL_CLIENT_HDR_EXT) CCM_Events$(IDL_CLIENT_HDR_EXT) CCM_EventConsumerBase$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files )

INST_TAGS = $(CUSTOM_INST_TAGS)
INST_LOCATIONS = $(foreach tag,$(INST_TAGS),-b $(tag)=include$(INST_DIR))

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#build_files:
#CCM_lem_stub.mpc
#CCM_stub.mpc
#CCM_svnt.mpc
#
#idl_files:
#CCM_Base.idl
#CCM_Exceptions.idl
#CCM_Cookie.idl
#CCM_Enumeration.idl
#CCM_EventBase.idl
#Components.idl
#CCM_HomeConfiguration.idl
#CCM_StandardConfigurator.idl
#CCM_Home.idl
#CCM_Homes.idl
#CCM_Object.idl
#CCM_PrimaryKeyBase.idl
#CCM_HomeFinder.idl
#CCM_Configurator.idl
#CCM_KeylessCCMHome.idl
#CCM_Navigation.idl
#CCM_Receptacle.idl
#CCM_Events.idl
#CCM_EventConsumerBase.idl
#

#END MPC-Generated Install Info

