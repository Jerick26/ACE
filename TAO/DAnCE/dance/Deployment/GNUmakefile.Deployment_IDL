# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.Deployment_IDL
#
# $Id: gnu.mpd 95691 2012-04-10 20:11:35Z mitza $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.Deployment_IDL
DEPENDENCY_FILE  = .depend.Deployment_IDL


LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO
DANCE_ROOT ?= $(TAO_ROOT)/DAnCE

FILES = \


#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
TAO_IDL = ../../../../bin/tao_idl
TAO_IDL_DEP = ../../../../bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I../../..$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DANCE_ROOT)/rules.dance.GNU
include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/Deployment_IDL
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

LIBCHECK = 1
ifeq ($(corba_messaging),1)
ifeq ($(ami),1)
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif
else
  all: require_warning
endif
else
  all: require_warning
endif

ifeq ($(corba_messaging),1)
ifeq ($(ami),1)
else
  all: require_warning
endif
else
  all: require_warning
endif

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L../../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L../../../../lib $(if $(ARCH),-L../../../../lib/$(ARCH))
endif
CPPFLAGS     += -I../.. -I../../../.. -I../../..
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo Deployment_IDL will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(corba_messaging),1)
requires_disabled_macros += corba_messaging
endif
ifneq ($(ami),1)
requires_disabled_macros += ami
endif
require_warning:
	@echo Deployment_IDL will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))
LIBPATH           := $(LIBPATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))
PATH              := $(PATH):../../../../lib$(if $(ARCH),:../../../../lib/$(ARCH))

GENERATED_DIRTY += Deployment_Packaging_DataC.h Deployment_Packaging_DataS.h Deployment_Packaging_DataC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_Packaging_Data.idl" -nt "Deployment_Packaging_DataC.h" 2> /dev/null || $(TEST_EXE) "Deployment_Packaging_Data.idl" -nt "Deployment_Packaging_DataS.h" 2> /dev/null || $(TEST_EXE) "Deployment_Packaging_Data.idl" -nt "Deployment_Packaging_DataC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_Packaging_DataC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_Packaging_DataS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_Packaging_DataC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_Packaging_DataC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_Packaging_DataS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_Packaging_DataC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_Packaging_DataC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_Packaging_DataS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_Packaging_DataC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_Packaging_DataC.h Deployment_Packaging_DataS.h Deployment_Packaging_DataC.cpp: Deployment_Packaging_Data.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_Packaging_Data.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_Packaging_DataC.h Deployment_Packaging_DataS.h Deployment_Packaging_DataC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_PlanErrorC.h Deployment_PlanErrorS.h Deployment_PlanErrorC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_PlanError.idl" -nt "Deployment_PlanErrorC.h" 2> /dev/null || $(TEST_EXE) "Deployment_PlanError.idl" -nt "Deployment_PlanErrorS.h" 2> /dev/null || $(TEST_EXE) "Deployment_PlanError.idl" -nt "Deployment_PlanErrorC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_PlanErrorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_PlanErrorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_PlanErrorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_PlanErrorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_PlanErrorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_PlanErrorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_PlanErrorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_PlanErrorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_PlanErrorC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_PlanErrorC.h Deployment_PlanErrorS.h Deployment_PlanErrorC.cpp: Deployment_PlanError.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_PlanError.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_PlanErrorC.h Deployment_PlanErrorS.h Deployment_PlanErrorC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_InvalidPropertyC.h Deployment_InvalidPropertyS.h Deployment_InvalidPropertyC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_InvalidProperty.idl" -nt "Deployment_InvalidPropertyC.h" 2> /dev/null || $(TEST_EXE) "Deployment_InvalidProperty.idl" -nt "Deployment_InvalidPropertyS.h" 2> /dev/null || $(TEST_EXE) "Deployment_InvalidProperty.idl" -nt "Deployment_InvalidPropertyC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidPropertyC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidPropertyS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidPropertyC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidPropertyC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidPropertyS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidPropertyC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidPropertyC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidPropertyS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidPropertyC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_InvalidPropertyC.h Deployment_InvalidPropertyS.h Deployment_InvalidPropertyC.cpp: Deployment_InvalidProperty.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_InvalidProperty.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_InvalidPropertyC.h Deployment_InvalidPropertyS.h Deployment_InvalidPropertyC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_InvalidNodeExecParameterC.h Deployment_InvalidNodeExecParameterS.h Deployment_InvalidNodeExecParameterC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_InvalidNodeExecParameter.idl" -nt "Deployment_InvalidNodeExecParameterC.h" 2> /dev/null || $(TEST_EXE) "Deployment_InvalidNodeExecParameter.idl" -nt "Deployment_InvalidNodeExecParameterS.h" 2> /dev/null || $(TEST_EXE) "Deployment_InvalidNodeExecParameter.idl" -nt "Deployment_InvalidNodeExecParameterC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidNodeExecParameterC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidNodeExecParameterS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidNodeExecParameterC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidNodeExecParameterC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidNodeExecParameterS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidNodeExecParameterC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidNodeExecParameterC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidNodeExecParameterS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidNodeExecParameterC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_InvalidNodeExecParameterC.h Deployment_InvalidNodeExecParameterS.h Deployment_InvalidNodeExecParameterC.cpp: Deployment_InvalidNodeExecParameter.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_InvalidNodeExecParameter.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_InvalidNodeExecParameterC.h Deployment_InvalidNodeExecParameterS.h Deployment_InvalidNodeExecParameterC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_InvalidComponentExecParameterC.h Deployment_InvalidComponentExecParameterS.h Deployment_InvalidComponentExecParameterC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_InvalidComponentExecParameter.idl" -nt "Deployment_InvalidComponentExecParameterC.h" 2> /dev/null || $(TEST_EXE) "Deployment_InvalidComponentExecParameter.idl" -nt "Deployment_InvalidComponentExecParameterS.h" 2> /dev/null || $(TEST_EXE) "Deployment_InvalidComponentExecParameter.idl" -nt "Deployment_InvalidComponentExecParameterC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidComponentExecParameterC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidComponentExecParameterS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidComponentExecParameterC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidComponentExecParameterC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidComponentExecParameterS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidComponentExecParameterC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidComponentExecParameterC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidComponentExecParameterS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidComponentExecParameterC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_InvalidComponentExecParameterC.h Deployment_InvalidComponentExecParameterS.h Deployment_InvalidComponentExecParameterC.cpp: Deployment_InvalidComponentExecParameter.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_InvalidComponentExecParameter.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_InvalidComponentExecParameterC.h Deployment_InvalidComponentExecParameterS.h Deployment_InvalidComponentExecParameterC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_InvalidConnectionC.h Deployment_InvalidConnectionS.h Deployment_InvalidConnectionC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_InvalidConnection.idl" -nt "Deployment_InvalidConnectionC.h" 2> /dev/null || $(TEST_EXE) "Deployment_InvalidConnection.idl" -nt "Deployment_InvalidConnectionS.h" 2> /dev/null || $(TEST_EXE) "Deployment_InvalidConnection.idl" -nt "Deployment_InvalidConnectionC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidConnectionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidConnectionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_InvalidConnectionC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidConnectionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidConnectionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_InvalidConnectionC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidConnectionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidConnectionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_InvalidConnectionC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_InvalidConnectionC.h Deployment_InvalidConnectionS.h Deployment_InvalidConnectionC.cpp: Deployment_InvalidConnection.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_InvalidConnection.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_InvalidConnectionC.h Deployment_InvalidConnectionS.h Deployment_InvalidConnectionC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_ResourceNotAvailableC.h Deployment_ResourceNotAvailableS.h Deployment_ResourceNotAvailableC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_ResourceNotAvailable.idl" -nt "Deployment_ResourceNotAvailableC.h" 2> /dev/null || $(TEST_EXE) "Deployment_ResourceNotAvailable.idl" -nt "Deployment_ResourceNotAvailableS.h" 2> /dev/null || $(TEST_EXE) "Deployment_ResourceNotAvailable.idl" -nt "Deployment_ResourceNotAvailableC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ResourceNotAvailableC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ResourceNotAvailableS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ResourceNotAvailableC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ResourceNotAvailableC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ResourceNotAvailableS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ResourceNotAvailableC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ResourceNotAvailableC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ResourceNotAvailableS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ResourceNotAvailableC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_ResourceNotAvailableC.h Deployment_ResourceNotAvailableS.h Deployment_ResourceNotAvailableC.cpp: Deployment_ResourceNotAvailable.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_ResourceNotAvailable.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_ResourceNotAvailableC.h Deployment_ResourceNotAvailableS.h Deployment_ResourceNotAvailableC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_ConnectionC.h Deployment_ConnectionS.h Deployment_ConnectionC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_Connection.idl" -nt "Deployment_ConnectionC.h" 2> /dev/null || $(TEST_EXE) "Deployment_Connection.idl" -nt "Deployment_ConnectionS.h" 2> /dev/null || $(TEST_EXE) "Deployment_Connection.idl" -nt "Deployment_ConnectionC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ConnectionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ConnectionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ConnectionC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ConnectionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ConnectionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ConnectionC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ConnectionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ConnectionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ConnectionC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_ConnectionC.h Deployment_ConnectionS.h Deployment_ConnectionC.cpp: Deployment_Connection.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_Connection.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_ConnectionC.h Deployment_ConnectionS.h Deployment_ConnectionC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_StopErrorC.h Deployment_StopErrorS.h Deployment_StopErrorC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_StopError.idl" -nt "Deployment_StopErrorC.h" 2> /dev/null || $(TEST_EXE) "Deployment_StopError.idl" -nt "Deployment_StopErrorS.h" 2> /dev/null || $(TEST_EXE) "Deployment_StopError.idl" -nt "Deployment_StopErrorC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_StopErrorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_StopErrorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_StopErrorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_StopErrorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_StopErrorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_StopErrorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_StopErrorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_StopErrorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_StopErrorC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_StopErrorC.h Deployment_StopErrorS.h Deployment_StopErrorC.cpp: Deployment_StopError.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_StopError.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_StopErrorC.h Deployment_StopErrorS.h Deployment_StopErrorC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_StartErrorC.h Deployment_StartErrorS.h Deployment_StartErrorC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_StartError.idl" -nt "Deployment_StartErrorC.h" 2> /dev/null || $(TEST_EXE) "Deployment_StartError.idl" -nt "Deployment_StartErrorS.h" 2> /dev/null || $(TEST_EXE) "Deployment_StartError.idl" -nt "Deployment_StartErrorC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_StartErrorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_StartErrorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_StartErrorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_StartErrorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_StartErrorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_StartErrorC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_StartErrorC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_StartErrorS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_StartErrorC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_StartErrorC.h Deployment_StartErrorS.h Deployment_StartErrorC.cpp: Deployment_StartError.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_StartError.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_StartErrorC.h Deployment_StartErrorS.h Deployment_StartErrorC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_DeploymentPlanC.h Deployment_DeploymentPlanS.h Deployment_DeploymentPlanC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_DeploymentPlan.idl" -nt "Deployment_DeploymentPlanC.h" 2> /dev/null || $(TEST_EXE) "Deployment_DeploymentPlan.idl" -nt "Deployment_DeploymentPlanS.h" 2> /dev/null || $(TEST_EXE) "Deployment_DeploymentPlan.idl" -nt "Deployment_DeploymentPlanC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_DeploymentPlanC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_DeploymentPlanS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_DeploymentPlanC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_DeploymentPlanC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_DeploymentPlanS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_DeploymentPlanC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_DeploymentPlanC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_DeploymentPlanS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_DeploymentPlanC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_DeploymentPlanC.h Deployment_DeploymentPlanS.h Deployment_DeploymentPlanC.cpp: Deployment_DeploymentPlan.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_DeploymentPlan.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_DeploymentPlanC.h Deployment_DeploymentPlanS.h Deployment_DeploymentPlanC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_DataC.h Deployment_DataS.h Deployment_DataC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_Data.idl" -nt "Deployment_DataC.h" 2> /dev/null || $(TEST_EXE) "Deployment_Data.idl" -nt "Deployment_DataS.h" 2> /dev/null || $(TEST_EXE) "Deployment_Data.idl" -nt "Deployment_DataC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_DataC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_DataS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_DataC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_DataC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_DataS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_DataC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_DataC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_DataS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_DataC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_DataC.h Deployment_DataS.h Deployment_DataC.cpp: Deployment_Data.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_Data.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_DataC.h Deployment_DataS.h Deployment_DataC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_TargetDataC.h Deployment_TargetDataS.h Deployment_TargetDataC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_TargetData.idl" -nt "Deployment_TargetDataC.h" 2> /dev/null || $(TEST_EXE) "Deployment_TargetData.idl" -nt "Deployment_TargetDataS.h" 2> /dev/null || $(TEST_EXE) "Deployment_TargetData.idl" -nt "Deployment_TargetDataC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_TargetDataC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_TargetDataS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_TargetDataC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_TargetDataC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_TargetDataS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_TargetDataC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_TargetDataC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_TargetDataS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_TargetDataC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_TargetDataC.h Deployment_TargetDataS.h Deployment_TargetDataC.cpp: Deployment_TargetData.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment_TargetData.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_TargetDataC.h Deployment_TargetDataS.h Deployment_TargetDataC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += DeploymentC.h DeploymentS.h DeploymentC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment.idl" -nt "DeploymentC.h" 2> /dev/null || $(TEST_EXE) "Deployment.idl" -nt "DeploymentS.h" 2> /dev/null || $(TEST_EXE) "Deployment.idl" -nt "DeploymentC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DeploymentC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DeploymentS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DeploymentC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DeploymentC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DeploymentS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DeploymentC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DeploymentC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DeploymentS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DeploymentC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DeploymentC.h DeploymentS.h DeploymentC.cpp: Deployment.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS -Sci Deployment.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DeploymentC.h DeploymentS.h DeploymentC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_BaseC.inl Deployment_BaseC.h Deployment_BaseS.h Deployment_BaseC.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_Base.idl" -nt "Deployment_BaseC.inl" 2> /dev/null || $(TEST_EXE) "Deployment_Base.idl" -nt "Deployment_BaseC.h" 2> /dev/null || $(TEST_EXE) "Deployment_Base.idl" -nt "Deployment_BaseS.h" 2> /dev/null || $(TEST_EXE) "Deployment_Base.idl" -nt "Deployment_BaseC.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_BaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_BaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_BaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_BaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_BaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_BaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_BaseC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_BaseC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_BaseC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_BaseS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_BaseC.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_BaseC.inl Deployment_BaseC.h Deployment_BaseS.h Deployment_BaseC.cpp: Deployment_Base.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -SS Deployment_Base.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_BaseC.inl Deployment_BaseC.h Deployment_BaseS.h Deployment_BaseC.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_ApplicationC.inl Deployment_ApplicationC.h Deployment_ApplicationS.h Deployment_stub_export.h Deployment_ApplicationC.cpp Deployment_ApplicationS.cpp Deployment_skel_export.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_Application.idl" -nt "Deployment_ApplicationC.inl" 2> /dev/null || $(TEST_EXE) "Deployment_Application.idl" -nt "Deployment_ApplicationC.h" 2> /dev/null || $(TEST_EXE) "Deployment_Application.idl" -nt "Deployment_ApplicationS.h" 2> /dev/null || $(TEST_EXE) "Deployment_Application.idl" -nt "Deployment_stub_export.h" 2> /dev/null || $(TEST_EXE) "Deployment_Application.idl" -nt "Deployment_ApplicationC.cpp" 2> /dev/null || $(TEST_EXE) "Deployment_Application.idl" -nt "Deployment_ApplicationS.cpp" 2> /dev/null || $(TEST_EXE) "Deployment_Application.idl" -nt "Deployment_skel_export.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ApplicationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ApplicationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ApplicationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_stub_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ApplicationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ApplicationS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_skel_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ApplicationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ApplicationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ApplicationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_stub_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ApplicationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ApplicationS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_skel_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ApplicationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ApplicationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ApplicationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_stub_export.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ApplicationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ApplicationS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_skel_export.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_ApplicationC.inl Deployment_ApplicationC.h Deployment_ApplicationS.h Deployment_stub_export.h Deployment_ApplicationC.cpp Deployment_ApplicationS.cpp Deployment_skel_export.h: Deployment_Application.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h -Gxhst -Gxhsk Deployment_Application.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_ApplicationC.inl Deployment_ApplicationC.h Deployment_ApplicationS.h Deployment_stub_export.h Deployment_ApplicationC.cpp Deployment_ApplicationS.cpp Deployment_skel_export.h: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

GENERATED_DIRTY += Deployment_ResourceCommitmentManagerC.inl Deployment_ResourceCommitmentManagerC.h Deployment_ResourceCommitmentManagerS.h Deployment_ResourceCommitmentManagerC.cpp Deployment_ResourceCommitmentManagerS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "Deployment_ResourceCommitmentManager.idl" -nt "Deployment_ResourceCommitmentManagerC.inl" 2> /dev/null || $(TEST_EXE) "Deployment_ResourceCommitmentManager.idl" -nt "Deployment_ResourceCommitmentManagerC.h" 2> /dev/null || $(TEST_EXE) "Deployment_ResourceCommitmentManager.idl" -nt "Deployment_ResourceCommitmentManagerS.h" 2> /dev/null || $(TEST_EXE) "Deployment_ResourceCommitmentManager.idl" -nt "Deployment_ResourceCommitmentManagerC.cpp" 2> /dev/null || $(TEST_EXE) "Deployment_ResourceCommitmentManager.idl" -nt "Deployment_ResourceCommitmentManagerS.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ResourceCommitmentManagerC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ResourceCommitmentManagerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ResourceCommitmentManagerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ResourceCommitmentManagerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "Deployment_ResourceCommitmentManagerS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "Deployment_ResourceCommitmentManagerS.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
Deployment_ResourceCommitmentManagerC.inl Deployment_ResourceCommitmentManagerC.h Deployment_ResourceCommitmentManagerS.h Deployment_ResourceCommitmentManagerC.cpp Deployment_ResourceCommitmentManagerS.cpp: Deployment_ResourceCommitmentManager.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -I../.. -GC -GH -Wb,stub_export_macro=DEPLOYMENT_STUB_Export -Wb,stub_export_include=Deployment_stub_export.h -Wb,skel_export_macro=DEPLOYMENT_SKEL_Export -Wb,skel_export_include=Deployment_skel_export.h Deployment_ResourceCommitmentManager.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
Deployment_ResourceCommitmentManagerC.inl Deployment_ResourceCommitmentManagerC.h Deployment_ResourceCommitmentManagerS.h Deployment_ResourceCommitmentManagerC.cpp Deployment_ResourceCommitmentManagerS.cpp: $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT)) $(call ADD_ARCH,../../../../lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))
endif
endif

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
ifeq ($(corba_messaging),1)
ifeq ($(ami),1)
all: $(GENERATED_DIRTY)
endif
endif
endif

ADDITIONAL_IDL_TARGETS += Deployment_Packaging_Data$(IDL_CLIENT_HDR_EXT) Deployment_PlanError$(IDL_CLIENT_HDR_EXT) Deployment_InvalidProperty$(IDL_CLIENT_HDR_EXT) Deployment_InvalidNodeExecParameter$(IDL_CLIENT_HDR_EXT) Deployment_InvalidComponentExecParameter$(IDL_CLIENT_HDR_EXT) Deployment_InvalidConnection$(IDL_CLIENT_HDR_EXT) Deployment_ResourceNotAvailable$(IDL_CLIENT_HDR_EXT) Deployment_Connection$(IDL_CLIENT_HDR_EXT) Deployment_StopError$(IDL_CLIENT_HDR_EXT) Deployment_StartError$(IDL_CLIENT_HDR_EXT) Deployment_DeploymentPlan$(IDL_CLIENT_HDR_EXT) Deployment_Data$(IDL_CLIENT_HDR_EXT) Deployment_TargetData$(IDL_CLIENT_HDR_EXT) Deployment$(IDL_CLIENT_HDR_EXT) Deployment_Base$(IDL_CLIENT_HDR_EXT) Deployment_Application$(IDL_CLIENT_HDR_EXT) Deployment_ResourceCommitmentManager$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(corba_messaging),1)
ifeq ($(ami),1)
	@-:
endif
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /dance/Deployment
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files )

INST_TAGS = $(CUSTOM_INST_TAGS)
INST_LOCATIONS = $(foreach tag,$(INST_TAGS),-b $(tag)=include$(INST_DIR))

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
ifeq ($(corba_messaging),1)
ifeq ($(ami),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif
endif
endif

#BEGIN MPC-Generated Install Info
#build_files:
#Deployment_Core.mpc
#
#idl_files:
#Deployment_Packaging_Data.idl
#Deployment_PlanError.idl
#Deployment_InvalidProperty.idl
#Deployment_InvalidNodeExecParameter.idl
#Deployment_InvalidComponentExecParameter.idl
#Deployment_InvalidConnection.idl
#Deployment_ResourceNotAvailable.idl
#Deployment_Connection.idl
#Deployment_StopError.idl
#Deployment_StartError.idl
#Deployment_DeploymentPlan.idl
#Deployment_Data.idl
#Deployment_TargetData.idl
#Deployment.idl
#Deployment_Base.idl
#Deployment_Application.idl
#Deployment_ResourceCommitmentManager.idl
#

#END MPC-Generated Install Info

